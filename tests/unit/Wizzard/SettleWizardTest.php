<?php

namespace WayForPay\SDK\Tests;

use PHPUnit\Framework\TestCase;
use WayForPay\SDK\Credential\AccountSecretTestCredential;
use WayForPay\SDK\Wizard\SettleWizard;

/**
 * Class SettleWizardTest
 * @package WayForPay\SDK\Tests
 */
class SettleWizardTest extends TestCase {

    /**
     * @var AccountSecretTestCredential
     */
    private $accountSecretCredential;

    private $data = array('orderReference' => 'test-order-reference', 'currency' => 'UAH', 'amount' => 200);

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->accountSecretCredential = new AccountSecretTestCredential();
    }

    public function test_get() {
        $this->assertInstanceOf('\WayForPay\SDK\Wizard\SettleWizard', SettleWizard::get($this->accountSecretCredential));
    }

    public function test_success_data() {
        $wizard = SettleWizard::get($this->accountSecretCredential);
        $wizard->setCurrency($this->data['currency']);
        $wizard->setAmount($this->data['amount']);
        $wizard->setOrderReference($this->data['orderReference']);

        $this->assertInstanceOf('\WayForPay\SDK\Request\SettleRequest', $wizard->getRequest());

        $requestData = $wizard->getRequest()->getTransactionData();

        foreach ($this->data as $field => $value) {
            $this->assertEquals($value, $requestData[$field]);
        }
    }

    public function test_failure_data() {
        $wizard = SettleWizard::get($this->accountSecretCredential);
        $this->expectException('InvalidArgumentException');

        $this->assertInstanceOf('\WayForPay\SDK\Request\SettleRequest', $wizard->getRequest());
    }

}