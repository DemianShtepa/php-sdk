<?php

namespace Tests\WayForPay\SDK\Request;

use PHPUnit\Framework\TestCase;
use WayForPay\SDK\Credential\AccountSecretTestCredential;
use WayForPay\SDK\Helper\SignatureHelper;
use WayForPay\SDK\Request\SettleRequest;

/**
 * Class SettleRequestTest
 * @package Tests\WayForPay\SDK\Request
 */
class SettleRequestTest extends TestCase {

    /**
     * @var AccountSecretTestCredential
     */
    private $accountSecretCredential;

    private $data = array('orderReference' => 'test-order-reference', 'currency' => 'UAH', 'amount' => 200);

    /**
     * @var SettleRequest
     */
    private $request;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->accountSecretCredential = new AccountSecretTestCredential();
        $this->request = new SettleRequest($this->accountSecretCredential, $this->data['orderReference'], $this->data['amount'], $this->data['currency']);
    }

    public function test_get_request_signature_fields_values() {
        $this->assertEquals(array_merge(array(
            'merchantAccount' => $this->accountSecretCredential->getAccount(),
        ), $this->data), $this->request->getRequestSignatureFieldsValues());
    }

    public function test_get_response_signature_fields_required() {
        $this->assertEquals(array(
            'merchantAccount',
            'orderReference',
            'transactionStatus',
            'reasonCode',
        ), $this->request->getResponseSignatureFieldsRequired());
    }

    public function test_get_transaction_type() {
        $this->assertEquals('SETTLE', $this->request->getTransactionType());
    }

    public function test_get_transaction_data() {
        $this->assertEquals(array(
            'transactionType' => 'SETTLE',
            'merchantAccount' => $this->accountSecretCredential->getAccount(),
            'merchantSignature' => SignatureHelper::calculateSignature(
                $this->request->getRequestSignatureFieldsValues(),
                $this->accountSecretCredential->getSecret()
            ),
            'apiVersion' => 1,
            'orderReference' => $this->data['orderReference'],
            'amount' => $this->data['amount'],
            'currency' => $this->data['currency']
        ), $this->request->getTransactionData());
    }

}